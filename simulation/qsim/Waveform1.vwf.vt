// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/06/2017 15:32:58"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    DE0_NANO
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DE0_NANO_vlg_sample_tst(
	clk,
	dump,
	reset,
	sampler_tx
);
input  clk;
input  dump;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or dump or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module DE0_NANO_vlg_check_tst (
	instr,
	pc,
	ReadData,
	UltimaMem,
	WriteData,
	sampler_rx
);
input [31:0] instr;
input [31:0] pc;
input [31:0] ReadData;
input [31:0] UltimaMem;
input [31:0] WriteData;
input sampler_rx;

reg [31:0] instr_expected;
reg [31:0] pc_expected;
reg [31:0] ReadData_expected;
reg [31:0] UltimaMem_expected;
reg [31:0] WriteData_expected;

reg [31:0] instr_prev;
reg [31:0] pc_prev;
reg [31:0] ReadData_prev;
reg [31:0] UltimaMem_prev;
reg [31:0] WriteData_prev;

reg [31:0] instr_expected_prev;
reg [31:0] pc_expected_prev;
reg [31:0] ReadData_expected_prev;
reg [31:0] UltimaMem_expected_prev;
reg [31:0] WriteData_expected_prev;

reg [31:0] last_instr_exp;
reg [31:0] last_pc_exp;
reg [31:0] last_ReadData_exp;
reg [31:0] last_UltimaMem_exp;
reg [31:0] last_WriteData_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	instr_prev = instr;
	pc_prev = pc;
	ReadData_prev = ReadData;
	UltimaMem_prev = UltimaMem;
	WriteData_prev = WriteData;
end

// update expected /o prevs

always @(trigger)
begin
	instr_expected_prev = instr_expected;
	pc_expected_prev = pc_expected;
	ReadData_expected_prev = ReadData_expected;
	UltimaMem_expected_prev = UltimaMem_expected;
	WriteData_expected_prev = WriteData_expected;
end


// expected pc[ 31 ]
initial
begin
	pc_expected[31] = 1'bX;
end 
// expected pc[ 30 ]
initial
begin
	pc_expected[30] = 1'bX;
end 
// expected pc[ 29 ]
initial
begin
	pc_expected[29] = 1'bX;
end 
// expected pc[ 28 ]
initial
begin
	pc_expected[28] = 1'bX;
end 
// expected pc[ 27 ]
initial
begin
	pc_expected[27] = 1'bX;
end 
// expected pc[ 26 ]
initial
begin
	pc_expected[26] = 1'bX;
end 
// expected pc[ 25 ]
initial
begin
	pc_expected[25] = 1'bX;
end 
// expected pc[ 24 ]
initial
begin
	pc_expected[24] = 1'bX;
end 
// expected pc[ 23 ]
initial
begin
	pc_expected[23] = 1'bX;
end 
// expected pc[ 22 ]
initial
begin
	pc_expected[22] = 1'bX;
end 
// expected pc[ 21 ]
initial
begin
	pc_expected[21] = 1'bX;
end 
// expected pc[ 20 ]
initial
begin
	pc_expected[20] = 1'bX;
end 
// expected pc[ 19 ]
initial
begin
	pc_expected[19] = 1'bX;
end 
// expected pc[ 18 ]
initial
begin
	pc_expected[18] = 1'bX;
end 
// expected pc[ 17 ]
initial
begin
	pc_expected[17] = 1'bX;
end 
// expected pc[ 16 ]
initial
begin
	pc_expected[16] = 1'bX;
end 
// expected pc[ 15 ]
initial
begin
	pc_expected[15] = 1'bX;
end 
// expected pc[ 14 ]
initial
begin
	pc_expected[14] = 1'bX;
end 
// expected pc[ 13 ]
initial
begin
	pc_expected[13] = 1'bX;
end 
// expected pc[ 12 ]
initial
begin
	pc_expected[12] = 1'bX;
end 
// expected pc[ 11 ]
initial
begin
	pc_expected[11] = 1'bX;
end 
// expected pc[ 10 ]
initial
begin
	pc_expected[10] = 1'bX;
end 
// expected pc[ 9 ]
initial
begin
	pc_expected[9] = 1'bX;
end 
// expected pc[ 8 ]
initial
begin
	pc_expected[8] = 1'bX;
end 
// expected pc[ 7 ]
initial
begin
	pc_expected[7] = 1'bX;
end 
// expected pc[ 6 ]
initial
begin
	pc_expected[6] = 1'bX;
end 
// expected pc[ 5 ]
initial
begin
	pc_expected[5] = 1'bX;
end 
// expected pc[ 4 ]
initial
begin
	pc_expected[4] = 1'bX;
end 
// expected pc[ 3 ]
initial
begin
	pc_expected[3] = 1'bX;
end 
// expected pc[ 2 ]
initial
begin
	pc_expected[2] = 1'bX;
end 
// expected pc[ 1 ]
initial
begin
	pc_expected[1] = 1'bX;
end 
// expected pc[ 0 ]
initial
begin
	pc_expected[0] = 1'bX;
end 
// expected instr[ 31 ]
initial
begin
	instr_expected[31] = 1'bX;
end 
// expected instr[ 30 ]
initial
begin
	instr_expected[30] = 1'bX;
end 
// expected instr[ 29 ]
initial
begin
	instr_expected[29] = 1'bX;
end 
// expected instr[ 28 ]
initial
begin
	instr_expected[28] = 1'bX;
end 
// expected instr[ 27 ]
initial
begin
	instr_expected[27] = 1'bX;
end 
// expected instr[ 26 ]
initial
begin
	instr_expected[26] = 1'bX;
end 
// expected instr[ 25 ]
initial
begin
	instr_expected[25] = 1'bX;
end 
// expected instr[ 24 ]
initial
begin
	instr_expected[24] = 1'bX;
end 
// expected instr[ 23 ]
initial
begin
	instr_expected[23] = 1'bX;
end 
// expected instr[ 22 ]
initial
begin
	instr_expected[22] = 1'bX;
end 
// expected instr[ 21 ]
initial
begin
	instr_expected[21] = 1'bX;
end 
// expected instr[ 20 ]
initial
begin
	instr_expected[20] = 1'bX;
end 
// expected instr[ 19 ]
initial
begin
	instr_expected[19] = 1'bX;
end 
// expected instr[ 18 ]
initial
begin
	instr_expected[18] = 1'bX;
end 
// expected instr[ 17 ]
initial
begin
	instr_expected[17] = 1'bX;
end 
// expected instr[ 16 ]
initial
begin
	instr_expected[16] = 1'bX;
end 
// expected instr[ 15 ]
initial
begin
	instr_expected[15] = 1'bX;
end 
// expected instr[ 14 ]
initial
begin
	instr_expected[14] = 1'bX;
end 
// expected instr[ 13 ]
initial
begin
	instr_expected[13] = 1'bX;
end 
// expected instr[ 12 ]
initial
begin
	instr_expected[12] = 1'bX;
end 
// expected instr[ 11 ]
initial
begin
	instr_expected[11] = 1'bX;
end 
// expected instr[ 10 ]
initial
begin
	instr_expected[10] = 1'bX;
end 
// expected instr[ 9 ]
initial
begin
	instr_expected[9] = 1'bX;
end 
// expected instr[ 8 ]
initial
begin
	instr_expected[8] = 1'bX;
end 
// expected instr[ 7 ]
initial
begin
	instr_expected[7] = 1'bX;
end 
// expected instr[ 6 ]
initial
begin
	instr_expected[6] = 1'bX;
end 
// expected instr[ 5 ]
initial
begin
	instr_expected[5] = 1'bX;
end 
// expected instr[ 4 ]
initial
begin
	instr_expected[4] = 1'bX;
end 
// expected instr[ 3 ]
initial
begin
	instr_expected[3] = 1'bX;
end 
// expected instr[ 2 ]
initial
begin
	instr_expected[2] = 1'bX;
end 
// expected instr[ 1 ]
initial
begin
	instr_expected[1] = 1'bX;
end 
// expected instr[ 0 ]
initial
begin
	instr_expected[0] = 1'bX;
end 
// expected ReadData[ 31 ]
initial
begin
	ReadData_expected[31] = 1'bX;
end 
// expected ReadData[ 30 ]
initial
begin
	ReadData_expected[30] = 1'bX;
end 
// expected ReadData[ 29 ]
initial
begin
	ReadData_expected[29] = 1'bX;
end 
// expected ReadData[ 28 ]
initial
begin
	ReadData_expected[28] = 1'bX;
end 
// expected ReadData[ 27 ]
initial
begin
	ReadData_expected[27] = 1'bX;
end 
// expected ReadData[ 26 ]
initial
begin
	ReadData_expected[26] = 1'bX;
end 
// expected ReadData[ 25 ]
initial
begin
	ReadData_expected[25] = 1'bX;
end 
// expected ReadData[ 24 ]
initial
begin
	ReadData_expected[24] = 1'bX;
end 
// expected ReadData[ 23 ]
initial
begin
	ReadData_expected[23] = 1'bX;
end 
// expected ReadData[ 22 ]
initial
begin
	ReadData_expected[22] = 1'bX;
end 
// expected ReadData[ 21 ]
initial
begin
	ReadData_expected[21] = 1'bX;
end 
// expected ReadData[ 20 ]
initial
begin
	ReadData_expected[20] = 1'bX;
end 
// expected ReadData[ 19 ]
initial
begin
	ReadData_expected[19] = 1'bX;
end 
// expected ReadData[ 18 ]
initial
begin
	ReadData_expected[18] = 1'bX;
end 
// expected ReadData[ 17 ]
initial
begin
	ReadData_expected[17] = 1'bX;
end 
// expected ReadData[ 16 ]
initial
begin
	ReadData_expected[16] = 1'bX;
end 
// expected ReadData[ 15 ]
initial
begin
	ReadData_expected[15] = 1'bX;
end 
// expected ReadData[ 14 ]
initial
begin
	ReadData_expected[14] = 1'bX;
end 
// expected ReadData[ 13 ]
initial
begin
	ReadData_expected[13] = 1'bX;
end 
// expected ReadData[ 12 ]
initial
begin
	ReadData_expected[12] = 1'bX;
end 
// expected ReadData[ 11 ]
initial
begin
	ReadData_expected[11] = 1'bX;
end 
// expected ReadData[ 10 ]
initial
begin
	ReadData_expected[10] = 1'bX;
end 
// expected ReadData[ 9 ]
initial
begin
	ReadData_expected[9] = 1'bX;
end 
// expected ReadData[ 8 ]
initial
begin
	ReadData_expected[8] = 1'bX;
end 
// expected ReadData[ 7 ]
initial
begin
	ReadData_expected[7] = 1'bX;
end 
// expected ReadData[ 6 ]
initial
begin
	ReadData_expected[6] = 1'bX;
end 
// expected ReadData[ 5 ]
initial
begin
	ReadData_expected[5] = 1'bX;
end 
// expected ReadData[ 4 ]
initial
begin
	ReadData_expected[4] = 1'bX;
end 
// expected ReadData[ 3 ]
initial
begin
	ReadData_expected[3] = 1'bX;
end 
// expected ReadData[ 2 ]
initial
begin
	ReadData_expected[2] = 1'bX;
end 
// expected ReadData[ 1 ]
initial
begin
	ReadData_expected[1] = 1'bX;
end 
// expected ReadData[ 0 ]
initial
begin
	ReadData_expected[0] = 1'bX;
end 
// expected UltimaMem[ 31 ]
initial
begin
	UltimaMem_expected[31] = 1'bX;
end 
// expected UltimaMem[ 30 ]
initial
begin
	UltimaMem_expected[30] = 1'bX;
end 
// expected UltimaMem[ 29 ]
initial
begin
	UltimaMem_expected[29] = 1'bX;
end 
// expected UltimaMem[ 28 ]
initial
begin
	UltimaMem_expected[28] = 1'bX;
end 
// expected UltimaMem[ 27 ]
initial
begin
	UltimaMem_expected[27] = 1'bX;
end 
// expected UltimaMem[ 26 ]
initial
begin
	UltimaMem_expected[26] = 1'bX;
end 
// expected UltimaMem[ 25 ]
initial
begin
	UltimaMem_expected[25] = 1'bX;
end 
// expected UltimaMem[ 24 ]
initial
begin
	UltimaMem_expected[24] = 1'bX;
end 
// expected UltimaMem[ 23 ]
initial
begin
	UltimaMem_expected[23] = 1'bX;
end 
// expected UltimaMem[ 22 ]
initial
begin
	UltimaMem_expected[22] = 1'bX;
end 
// expected UltimaMem[ 21 ]
initial
begin
	UltimaMem_expected[21] = 1'bX;
end 
// expected UltimaMem[ 20 ]
initial
begin
	UltimaMem_expected[20] = 1'bX;
end 
// expected UltimaMem[ 19 ]
initial
begin
	UltimaMem_expected[19] = 1'bX;
end 
// expected UltimaMem[ 18 ]
initial
begin
	UltimaMem_expected[18] = 1'bX;
end 
// expected UltimaMem[ 17 ]
initial
begin
	UltimaMem_expected[17] = 1'bX;
end 
// expected UltimaMem[ 16 ]
initial
begin
	UltimaMem_expected[16] = 1'bX;
end 
// expected UltimaMem[ 15 ]
initial
begin
	UltimaMem_expected[15] = 1'bX;
end 
// expected UltimaMem[ 14 ]
initial
begin
	UltimaMem_expected[14] = 1'bX;
end 
// expected UltimaMem[ 13 ]
initial
begin
	UltimaMem_expected[13] = 1'bX;
end 
// expected UltimaMem[ 12 ]
initial
begin
	UltimaMem_expected[12] = 1'bX;
end 
// expected UltimaMem[ 11 ]
initial
begin
	UltimaMem_expected[11] = 1'bX;
end 
// expected UltimaMem[ 10 ]
initial
begin
	UltimaMem_expected[10] = 1'bX;
end 
// expected UltimaMem[ 9 ]
initial
begin
	UltimaMem_expected[9] = 1'bX;
end 
// expected UltimaMem[ 8 ]
initial
begin
	UltimaMem_expected[8] = 1'bX;
end 
// expected UltimaMem[ 7 ]
initial
begin
	UltimaMem_expected[7] = 1'bX;
end 
// expected UltimaMem[ 6 ]
initial
begin
	UltimaMem_expected[6] = 1'bX;
end 
// expected UltimaMem[ 5 ]
initial
begin
	UltimaMem_expected[5] = 1'bX;
end 
// expected UltimaMem[ 4 ]
initial
begin
	UltimaMem_expected[4] = 1'bX;
end 
// expected UltimaMem[ 3 ]
initial
begin
	UltimaMem_expected[3] = 1'bX;
end 
// expected UltimaMem[ 2 ]
initial
begin
	UltimaMem_expected[2] = 1'bX;
end 
// expected UltimaMem[ 1 ]
initial
begin
	UltimaMem_expected[1] = 1'bX;
end 
// expected UltimaMem[ 0 ]
initial
begin
	UltimaMem_expected[0] = 1'bX;
end 
// expected WriteData[ 31 ]
initial
begin
	WriteData_expected[31] = 1'bX;
end 
// expected WriteData[ 30 ]
initial
begin
	WriteData_expected[30] = 1'bX;
end 
// expected WriteData[ 29 ]
initial
begin
	WriteData_expected[29] = 1'bX;
end 
// expected WriteData[ 28 ]
initial
begin
	WriteData_expected[28] = 1'bX;
end 
// expected WriteData[ 27 ]
initial
begin
	WriteData_expected[27] = 1'bX;
end 
// expected WriteData[ 26 ]
initial
begin
	WriteData_expected[26] = 1'bX;
end 
// expected WriteData[ 25 ]
initial
begin
	WriteData_expected[25] = 1'bX;
end 
// expected WriteData[ 24 ]
initial
begin
	WriteData_expected[24] = 1'bX;
end 
// expected WriteData[ 23 ]
initial
begin
	WriteData_expected[23] = 1'bX;
end 
// expected WriteData[ 22 ]
initial
begin
	WriteData_expected[22] = 1'bX;
end 
// expected WriteData[ 21 ]
initial
begin
	WriteData_expected[21] = 1'bX;
end 
// expected WriteData[ 20 ]
initial
begin
	WriteData_expected[20] = 1'bX;
end 
// expected WriteData[ 19 ]
initial
begin
	WriteData_expected[19] = 1'bX;
end 
// expected WriteData[ 18 ]
initial
begin
	WriteData_expected[18] = 1'bX;
end 
// expected WriteData[ 17 ]
initial
begin
	WriteData_expected[17] = 1'bX;
end 
// expected WriteData[ 16 ]
initial
begin
	WriteData_expected[16] = 1'bX;
end 
// expected WriteData[ 15 ]
initial
begin
	WriteData_expected[15] = 1'bX;
end 
// expected WriteData[ 14 ]
initial
begin
	WriteData_expected[14] = 1'bX;
end 
// expected WriteData[ 13 ]
initial
begin
	WriteData_expected[13] = 1'bX;
end 
// expected WriteData[ 12 ]
initial
begin
	WriteData_expected[12] = 1'bX;
end 
// expected WriteData[ 11 ]
initial
begin
	WriteData_expected[11] = 1'bX;
end 
// expected WriteData[ 10 ]
initial
begin
	WriteData_expected[10] = 1'bX;
end 
// expected WriteData[ 9 ]
initial
begin
	WriteData_expected[9] = 1'bX;
end 
// expected WriteData[ 8 ]
initial
begin
	WriteData_expected[8] = 1'bX;
end 
// expected WriteData[ 7 ]
initial
begin
	WriteData_expected[7] = 1'bX;
end 
// expected WriteData[ 6 ]
initial
begin
	WriteData_expected[6] = 1'bX;
end 
// expected WriteData[ 5 ]
initial
begin
	WriteData_expected[5] = 1'bX;
end 
// expected WriteData[ 4 ]
initial
begin
	WriteData_expected[4] = 1'bX;
end 
// expected WriteData[ 3 ]
initial
begin
	WriteData_expected[3] = 1'bX;
end 
// expected WriteData[ 2 ]
initial
begin
	WriteData_expected[2] = 1'bX;
end 
// expected WriteData[ 1 ]
initial
begin
	WriteData_expected[1] = 1'bX;
end 
// expected WriteData[ 0 ]
initial
begin
	WriteData_expected[0] = 1'bX;
end 
// generate trigger
always @(instr_expected or instr or pc_expected or pc or ReadData_expected or ReadData or UltimaMem_expected or UltimaMem or WriteData_expected or WriteData)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected instr = %b | expected pc = %b | expected ReadData = %b | expected UltimaMem = %b | expected WriteData = %b | ",instr_expected_prev,pc_expected_prev,ReadData_expected_prev,UltimaMem_expected_prev,WriteData_expected_prev);
	$display("| real instr = %b | real pc = %b | real ReadData = %b | real UltimaMem = %b | real WriteData = %b | ",instr_prev,pc_prev,ReadData_prev,UltimaMem_prev,WriteData_prev);
`endif
	if (
		( instr_expected_prev[0] !== 1'bx ) && ( instr_prev[0] !== instr_expected_prev[0] )
		&& ((instr_expected_prev[0] !== last_instr_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[0] = instr_expected_prev[0];
	end
	if (
		( instr_expected_prev[1] !== 1'bx ) && ( instr_prev[1] !== instr_expected_prev[1] )
		&& ((instr_expected_prev[1] !== last_instr_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[1] = instr_expected_prev[1];
	end
	if (
		( instr_expected_prev[2] !== 1'bx ) && ( instr_prev[2] !== instr_expected_prev[2] )
		&& ((instr_expected_prev[2] !== last_instr_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[2] = instr_expected_prev[2];
	end
	if (
		( instr_expected_prev[3] !== 1'bx ) && ( instr_prev[3] !== instr_expected_prev[3] )
		&& ((instr_expected_prev[3] !== last_instr_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[3] = instr_expected_prev[3];
	end
	if (
		( instr_expected_prev[4] !== 1'bx ) && ( instr_prev[4] !== instr_expected_prev[4] )
		&& ((instr_expected_prev[4] !== last_instr_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[4] = instr_expected_prev[4];
	end
	if (
		( instr_expected_prev[5] !== 1'bx ) && ( instr_prev[5] !== instr_expected_prev[5] )
		&& ((instr_expected_prev[5] !== last_instr_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[5] = instr_expected_prev[5];
	end
	if (
		( instr_expected_prev[6] !== 1'bx ) && ( instr_prev[6] !== instr_expected_prev[6] )
		&& ((instr_expected_prev[6] !== last_instr_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[6] = instr_expected_prev[6];
	end
	if (
		( instr_expected_prev[7] !== 1'bx ) && ( instr_prev[7] !== instr_expected_prev[7] )
		&& ((instr_expected_prev[7] !== last_instr_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[7] = instr_expected_prev[7];
	end
	if (
		( instr_expected_prev[8] !== 1'bx ) && ( instr_prev[8] !== instr_expected_prev[8] )
		&& ((instr_expected_prev[8] !== last_instr_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[8] = instr_expected_prev[8];
	end
	if (
		( instr_expected_prev[9] !== 1'bx ) && ( instr_prev[9] !== instr_expected_prev[9] )
		&& ((instr_expected_prev[9] !== last_instr_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[9] = instr_expected_prev[9];
	end
	if (
		( instr_expected_prev[10] !== 1'bx ) && ( instr_prev[10] !== instr_expected_prev[10] )
		&& ((instr_expected_prev[10] !== last_instr_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[10] = instr_expected_prev[10];
	end
	if (
		( instr_expected_prev[11] !== 1'bx ) && ( instr_prev[11] !== instr_expected_prev[11] )
		&& ((instr_expected_prev[11] !== last_instr_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[11] = instr_expected_prev[11];
	end
	if (
		( instr_expected_prev[12] !== 1'bx ) && ( instr_prev[12] !== instr_expected_prev[12] )
		&& ((instr_expected_prev[12] !== last_instr_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[12] = instr_expected_prev[12];
	end
	if (
		( instr_expected_prev[13] !== 1'bx ) && ( instr_prev[13] !== instr_expected_prev[13] )
		&& ((instr_expected_prev[13] !== last_instr_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[13] = instr_expected_prev[13];
	end
	if (
		( instr_expected_prev[14] !== 1'bx ) && ( instr_prev[14] !== instr_expected_prev[14] )
		&& ((instr_expected_prev[14] !== last_instr_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[14] = instr_expected_prev[14];
	end
	if (
		( instr_expected_prev[15] !== 1'bx ) && ( instr_prev[15] !== instr_expected_prev[15] )
		&& ((instr_expected_prev[15] !== last_instr_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[15] = instr_expected_prev[15];
	end
	if (
		( instr_expected_prev[16] !== 1'bx ) && ( instr_prev[16] !== instr_expected_prev[16] )
		&& ((instr_expected_prev[16] !== last_instr_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[16] = instr_expected_prev[16];
	end
	if (
		( instr_expected_prev[17] !== 1'bx ) && ( instr_prev[17] !== instr_expected_prev[17] )
		&& ((instr_expected_prev[17] !== last_instr_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[17] = instr_expected_prev[17];
	end
	if (
		( instr_expected_prev[18] !== 1'bx ) && ( instr_prev[18] !== instr_expected_prev[18] )
		&& ((instr_expected_prev[18] !== last_instr_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[18] = instr_expected_prev[18];
	end
	if (
		( instr_expected_prev[19] !== 1'bx ) && ( instr_prev[19] !== instr_expected_prev[19] )
		&& ((instr_expected_prev[19] !== last_instr_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[19] = instr_expected_prev[19];
	end
	if (
		( instr_expected_prev[20] !== 1'bx ) && ( instr_prev[20] !== instr_expected_prev[20] )
		&& ((instr_expected_prev[20] !== last_instr_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[20] = instr_expected_prev[20];
	end
	if (
		( instr_expected_prev[21] !== 1'bx ) && ( instr_prev[21] !== instr_expected_prev[21] )
		&& ((instr_expected_prev[21] !== last_instr_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[21] = instr_expected_prev[21];
	end
	if (
		( instr_expected_prev[22] !== 1'bx ) && ( instr_prev[22] !== instr_expected_prev[22] )
		&& ((instr_expected_prev[22] !== last_instr_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[22] = instr_expected_prev[22];
	end
	if (
		( instr_expected_prev[23] !== 1'bx ) && ( instr_prev[23] !== instr_expected_prev[23] )
		&& ((instr_expected_prev[23] !== last_instr_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[23] = instr_expected_prev[23];
	end
	if (
		( instr_expected_prev[24] !== 1'bx ) && ( instr_prev[24] !== instr_expected_prev[24] )
		&& ((instr_expected_prev[24] !== last_instr_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[24] = instr_expected_prev[24];
	end
	if (
		( instr_expected_prev[25] !== 1'bx ) && ( instr_prev[25] !== instr_expected_prev[25] )
		&& ((instr_expected_prev[25] !== last_instr_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[25] = instr_expected_prev[25];
	end
	if (
		( instr_expected_prev[26] !== 1'bx ) && ( instr_prev[26] !== instr_expected_prev[26] )
		&& ((instr_expected_prev[26] !== last_instr_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[26] = instr_expected_prev[26];
	end
	if (
		( instr_expected_prev[27] !== 1'bx ) && ( instr_prev[27] !== instr_expected_prev[27] )
		&& ((instr_expected_prev[27] !== last_instr_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[27] = instr_expected_prev[27];
	end
	if (
		( instr_expected_prev[28] !== 1'bx ) && ( instr_prev[28] !== instr_expected_prev[28] )
		&& ((instr_expected_prev[28] !== last_instr_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[28] = instr_expected_prev[28];
	end
	if (
		( instr_expected_prev[29] !== 1'bx ) && ( instr_prev[29] !== instr_expected_prev[29] )
		&& ((instr_expected_prev[29] !== last_instr_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[29] = instr_expected_prev[29];
	end
	if (
		( instr_expected_prev[30] !== 1'bx ) && ( instr_prev[30] !== instr_expected_prev[30] )
		&& ((instr_expected_prev[30] !== last_instr_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[30] = instr_expected_prev[30];
	end
	if (
		( instr_expected_prev[31] !== 1'bx ) && ( instr_prev[31] !== instr_expected_prev[31] )
		&& ((instr_expected_prev[31] !== last_instr_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_instr_exp[31] = instr_expected_prev[31];
	end
	if (
		( pc_expected_prev[0] !== 1'bx ) && ( pc_prev[0] !== pc_expected_prev[0] )
		&& ((pc_expected_prev[0] !== last_pc_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[0] = pc_expected_prev[0];
	end
	if (
		( pc_expected_prev[1] !== 1'bx ) && ( pc_prev[1] !== pc_expected_prev[1] )
		&& ((pc_expected_prev[1] !== last_pc_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[1] = pc_expected_prev[1];
	end
	if (
		( pc_expected_prev[2] !== 1'bx ) && ( pc_prev[2] !== pc_expected_prev[2] )
		&& ((pc_expected_prev[2] !== last_pc_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[2] = pc_expected_prev[2];
	end
	if (
		( pc_expected_prev[3] !== 1'bx ) && ( pc_prev[3] !== pc_expected_prev[3] )
		&& ((pc_expected_prev[3] !== last_pc_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[3] = pc_expected_prev[3];
	end
	if (
		( pc_expected_prev[4] !== 1'bx ) && ( pc_prev[4] !== pc_expected_prev[4] )
		&& ((pc_expected_prev[4] !== last_pc_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[4] = pc_expected_prev[4];
	end
	if (
		( pc_expected_prev[5] !== 1'bx ) && ( pc_prev[5] !== pc_expected_prev[5] )
		&& ((pc_expected_prev[5] !== last_pc_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[5] = pc_expected_prev[5];
	end
	if (
		( pc_expected_prev[6] !== 1'bx ) && ( pc_prev[6] !== pc_expected_prev[6] )
		&& ((pc_expected_prev[6] !== last_pc_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[6] = pc_expected_prev[6];
	end
	if (
		( pc_expected_prev[7] !== 1'bx ) && ( pc_prev[7] !== pc_expected_prev[7] )
		&& ((pc_expected_prev[7] !== last_pc_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[7] = pc_expected_prev[7];
	end
	if (
		( pc_expected_prev[8] !== 1'bx ) && ( pc_prev[8] !== pc_expected_prev[8] )
		&& ((pc_expected_prev[8] !== last_pc_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[8] = pc_expected_prev[8];
	end
	if (
		( pc_expected_prev[9] !== 1'bx ) && ( pc_prev[9] !== pc_expected_prev[9] )
		&& ((pc_expected_prev[9] !== last_pc_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[9] = pc_expected_prev[9];
	end
	if (
		( pc_expected_prev[10] !== 1'bx ) && ( pc_prev[10] !== pc_expected_prev[10] )
		&& ((pc_expected_prev[10] !== last_pc_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[10] = pc_expected_prev[10];
	end
	if (
		( pc_expected_prev[11] !== 1'bx ) && ( pc_prev[11] !== pc_expected_prev[11] )
		&& ((pc_expected_prev[11] !== last_pc_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[11] = pc_expected_prev[11];
	end
	if (
		( pc_expected_prev[12] !== 1'bx ) && ( pc_prev[12] !== pc_expected_prev[12] )
		&& ((pc_expected_prev[12] !== last_pc_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[12] = pc_expected_prev[12];
	end
	if (
		( pc_expected_prev[13] !== 1'bx ) && ( pc_prev[13] !== pc_expected_prev[13] )
		&& ((pc_expected_prev[13] !== last_pc_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[13] = pc_expected_prev[13];
	end
	if (
		( pc_expected_prev[14] !== 1'bx ) && ( pc_prev[14] !== pc_expected_prev[14] )
		&& ((pc_expected_prev[14] !== last_pc_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[14] = pc_expected_prev[14];
	end
	if (
		( pc_expected_prev[15] !== 1'bx ) && ( pc_prev[15] !== pc_expected_prev[15] )
		&& ((pc_expected_prev[15] !== last_pc_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[15] = pc_expected_prev[15];
	end
	if (
		( pc_expected_prev[16] !== 1'bx ) && ( pc_prev[16] !== pc_expected_prev[16] )
		&& ((pc_expected_prev[16] !== last_pc_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[16] = pc_expected_prev[16];
	end
	if (
		( pc_expected_prev[17] !== 1'bx ) && ( pc_prev[17] !== pc_expected_prev[17] )
		&& ((pc_expected_prev[17] !== last_pc_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[17] = pc_expected_prev[17];
	end
	if (
		( pc_expected_prev[18] !== 1'bx ) && ( pc_prev[18] !== pc_expected_prev[18] )
		&& ((pc_expected_prev[18] !== last_pc_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[18] = pc_expected_prev[18];
	end
	if (
		( pc_expected_prev[19] !== 1'bx ) && ( pc_prev[19] !== pc_expected_prev[19] )
		&& ((pc_expected_prev[19] !== last_pc_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[19] = pc_expected_prev[19];
	end
	if (
		( pc_expected_prev[20] !== 1'bx ) && ( pc_prev[20] !== pc_expected_prev[20] )
		&& ((pc_expected_prev[20] !== last_pc_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[20] = pc_expected_prev[20];
	end
	if (
		( pc_expected_prev[21] !== 1'bx ) && ( pc_prev[21] !== pc_expected_prev[21] )
		&& ((pc_expected_prev[21] !== last_pc_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[21] = pc_expected_prev[21];
	end
	if (
		( pc_expected_prev[22] !== 1'bx ) && ( pc_prev[22] !== pc_expected_prev[22] )
		&& ((pc_expected_prev[22] !== last_pc_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[22] = pc_expected_prev[22];
	end
	if (
		( pc_expected_prev[23] !== 1'bx ) && ( pc_prev[23] !== pc_expected_prev[23] )
		&& ((pc_expected_prev[23] !== last_pc_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[23] = pc_expected_prev[23];
	end
	if (
		( pc_expected_prev[24] !== 1'bx ) && ( pc_prev[24] !== pc_expected_prev[24] )
		&& ((pc_expected_prev[24] !== last_pc_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[24] = pc_expected_prev[24];
	end
	if (
		( pc_expected_prev[25] !== 1'bx ) && ( pc_prev[25] !== pc_expected_prev[25] )
		&& ((pc_expected_prev[25] !== last_pc_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[25] = pc_expected_prev[25];
	end
	if (
		( pc_expected_prev[26] !== 1'bx ) && ( pc_prev[26] !== pc_expected_prev[26] )
		&& ((pc_expected_prev[26] !== last_pc_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[26] = pc_expected_prev[26];
	end
	if (
		( pc_expected_prev[27] !== 1'bx ) && ( pc_prev[27] !== pc_expected_prev[27] )
		&& ((pc_expected_prev[27] !== last_pc_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[27] = pc_expected_prev[27];
	end
	if (
		( pc_expected_prev[28] !== 1'bx ) && ( pc_prev[28] !== pc_expected_prev[28] )
		&& ((pc_expected_prev[28] !== last_pc_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[28] = pc_expected_prev[28];
	end
	if (
		( pc_expected_prev[29] !== 1'bx ) && ( pc_prev[29] !== pc_expected_prev[29] )
		&& ((pc_expected_prev[29] !== last_pc_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[29] = pc_expected_prev[29];
	end
	if (
		( pc_expected_prev[30] !== 1'bx ) && ( pc_prev[30] !== pc_expected_prev[30] )
		&& ((pc_expected_prev[30] !== last_pc_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[30] = pc_expected_prev[30];
	end
	if (
		( pc_expected_prev[31] !== 1'bx ) && ( pc_prev[31] !== pc_expected_prev[31] )
		&& ((pc_expected_prev[31] !== last_pc_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[31] = pc_expected_prev[31];
	end
	if (
		( ReadData_expected_prev[0] !== 1'bx ) && ( ReadData_prev[0] !== ReadData_expected_prev[0] )
		&& ((ReadData_expected_prev[0] !== last_ReadData_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[0] = ReadData_expected_prev[0];
	end
	if (
		( ReadData_expected_prev[1] !== 1'bx ) && ( ReadData_prev[1] !== ReadData_expected_prev[1] )
		&& ((ReadData_expected_prev[1] !== last_ReadData_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[1] = ReadData_expected_prev[1];
	end
	if (
		( ReadData_expected_prev[2] !== 1'bx ) && ( ReadData_prev[2] !== ReadData_expected_prev[2] )
		&& ((ReadData_expected_prev[2] !== last_ReadData_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[2] = ReadData_expected_prev[2];
	end
	if (
		( ReadData_expected_prev[3] !== 1'bx ) && ( ReadData_prev[3] !== ReadData_expected_prev[3] )
		&& ((ReadData_expected_prev[3] !== last_ReadData_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[3] = ReadData_expected_prev[3];
	end
	if (
		( ReadData_expected_prev[4] !== 1'bx ) && ( ReadData_prev[4] !== ReadData_expected_prev[4] )
		&& ((ReadData_expected_prev[4] !== last_ReadData_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[4] = ReadData_expected_prev[4];
	end
	if (
		( ReadData_expected_prev[5] !== 1'bx ) && ( ReadData_prev[5] !== ReadData_expected_prev[5] )
		&& ((ReadData_expected_prev[5] !== last_ReadData_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[5] = ReadData_expected_prev[5];
	end
	if (
		( ReadData_expected_prev[6] !== 1'bx ) && ( ReadData_prev[6] !== ReadData_expected_prev[6] )
		&& ((ReadData_expected_prev[6] !== last_ReadData_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[6] = ReadData_expected_prev[6];
	end
	if (
		( ReadData_expected_prev[7] !== 1'bx ) && ( ReadData_prev[7] !== ReadData_expected_prev[7] )
		&& ((ReadData_expected_prev[7] !== last_ReadData_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[7] = ReadData_expected_prev[7];
	end
	if (
		( ReadData_expected_prev[8] !== 1'bx ) && ( ReadData_prev[8] !== ReadData_expected_prev[8] )
		&& ((ReadData_expected_prev[8] !== last_ReadData_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[8] = ReadData_expected_prev[8];
	end
	if (
		( ReadData_expected_prev[9] !== 1'bx ) && ( ReadData_prev[9] !== ReadData_expected_prev[9] )
		&& ((ReadData_expected_prev[9] !== last_ReadData_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[9] = ReadData_expected_prev[9];
	end
	if (
		( ReadData_expected_prev[10] !== 1'bx ) && ( ReadData_prev[10] !== ReadData_expected_prev[10] )
		&& ((ReadData_expected_prev[10] !== last_ReadData_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[10] = ReadData_expected_prev[10];
	end
	if (
		( ReadData_expected_prev[11] !== 1'bx ) && ( ReadData_prev[11] !== ReadData_expected_prev[11] )
		&& ((ReadData_expected_prev[11] !== last_ReadData_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[11] = ReadData_expected_prev[11];
	end
	if (
		( ReadData_expected_prev[12] !== 1'bx ) && ( ReadData_prev[12] !== ReadData_expected_prev[12] )
		&& ((ReadData_expected_prev[12] !== last_ReadData_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[12] = ReadData_expected_prev[12];
	end
	if (
		( ReadData_expected_prev[13] !== 1'bx ) && ( ReadData_prev[13] !== ReadData_expected_prev[13] )
		&& ((ReadData_expected_prev[13] !== last_ReadData_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[13] = ReadData_expected_prev[13];
	end
	if (
		( ReadData_expected_prev[14] !== 1'bx ) && ( ReadData_prev[14] !== ReadData_expected_prev[14] )
		&& ((ReadData_expected_prev[14] !== last_ReadData_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[14] = ReadData_expected_prev[14];
	end
	if (
		( ReadData_expected_prev[15] !== 1'bx ) && ( ReadData_prev[15] !== ReadData_expected_prev[15] )
		&& ((ReadData_expected_prev[15] !== last_ReadData_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[15] = ReadData_expected_prev[15];
	end
	if (
		( ReadData_expected_prev[16] !== 1'bx ) && ( ReadData_prev[16] !== ReadData_expected_prev[16] )
		&& ((ReadData_expected_prev[16] !== last_ReadData_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[16] = ReadData_expected_prev[16];
	end
	if (
		( ReadData_expected_prev[17] !== 1'bx ) && ( ReadData_prev[17] !== ReadData_expected_prev[17] )
		&& ((ReadData_expected_prev[17] !== last_ReadData_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[17] = ReadData_expected_prev[17];
	end
	if (
		( ReadData_expected_prev[18] !== 1'bx ) && ( ReadData_prev[18] !== ReadData_expected_prev[18] )
		&& ((ReadData_expected_prev[18] !== last_ReadData_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[18] = ReadData_expected_prev[18];
	end
	if (
		( ReadData_expected_prev[19] !== 1'bx ) && ( ReadData_prev[19] !== ReadData_expected_prev[19] )
		&& ((ReadData_expected_prev[19] !== last_ReadData_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[19] = ReadData_expected_prev[19];
	end
	if (
		( ReadData_expected_prev[20] !== 1'bx ) && ( ReadData_prev[20] !== ReadData_expected_prev[20] )
		&& ((ReadData_expected_prev[20] !== last_ReadData_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[20] = ReadData_expected_prev[20];
	end
	if (
		( ReadData_expected_prev[21] !== 1'bx ) && ( ReadData_prev[21] !== ReadData_expected_prev[21] )
		&& ((ReadData_expected_prev[21] !== last_ReadData_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[21] = ReadData_expected_prev[21];
	end
	if (
		( ReadData_expected_prev[22] !== 1'bx ) && ( ReadData_prev[22] !== ReadData_expected_prev[22] )
		&& ((ReadData_expected_prev[22] !== last_ReadData_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[22] = ReadData_expected_prev[22];
	end
	if (
		( ReadData_expected_prev[23] !== 1'bx ) && ( ReadData_prev[23] !== ReadData_expected_prev[23] )
		&& ((ReadData_expected_prev[23] !== last_ReadData_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[23] = ReadData_expected_prev[23];
	end
	if (
		( ReadData_expected_prev[24] !== 1'bx ) && ( ReadData_prev[24] !== ReadData_expected_prev[24] )
		&& ((ReadData_expected_prev[24] !== last_ReadData_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[24] = ReadData_expected_prev[24];
	end
	if (
		( ReadData_expected_prev[25] !== 1'bx ) && ( ReadData_prev[25] !== ReadData_expected_prev[25] )
		&& ((ReadData_expected_prev[25] !== last_ReadData_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[25] = ReadData_expected_prev[25];
	end
	if (
		( ReadData_expected_prev[26] !== 1'bx ) && ( ReadData_prev[26] !== ReadData_expected_prev[26] )
		&& ((ReadData_expected_prev[26] !== last_ReadData_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[26] = ReadData_expected_prev[26];
	end
	if (
		( ReadData_expected_prev[27] !== 1'bx ) && ( ReadData_prev[27] !== ReadData_expected_prev[27] )
		&& ((ReadData_expected_prev[27] !== last_ReadData_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[27] = ReadData_expected_prev[27];
	end
	if (
		( ReadData_expected_prev[28] !== 1'bx ) && ( ReadData_prev[28] !== ReadData_expected_prev[28] )
		&& ((ReadData_expected_prev[28] !== last_ReadData_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[28] = ReadData_expected_prev[28];
	end
	if (
		( ReadData_expected_prev[29] !== 1'bx ) && ( ReadData_prev[29] !== ReadData_expected_prev[29] )
		&& ((ReadData_expected_prev[29] !== last_ReadData_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[29] = ReadData_expected_prev[29];
	end
	if (
		( ReadData_expected_prev[30] !== 1'bx ) && ( ReadData_prev[30] !== ReadData_expected_prev[30] )
		&& ((ReadData_expected_prev[30] !== last_ReadData_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[30] = ReadData_expected_prev[30];
	end
	if (
		( ReadData_expected_prev[31] !== 1'bx ) && ( ReadData_prev[31] !== ReadData_expected_prev[31] )
		&& ((ReadData_expected_prev[31] !== last_ReadData_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ReadData_exp[31] = ReadData_expected_prev[31];
	end
	if (
		( UltimaMem_expected_prev[0] !== 1'bx ) && ( UltimaMem_prev[0] !== UltimaMem_expected_prev[0] )
		&& ((UltimaMem_expected_prev[0] !== last_UltimaMem_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[0] = UltimaMem_expected_prev[0];
	end
	if (
		( UltimaMem_expected_prev[1] !== 1'bx ) && ( UltimaMem_prev[1] !== UltimaMem_expected_prev[1] )
		&& ((UltimaMem_expected_prev[1] !== last_UltimaMem_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[1] = UltimaMem_expected_prev[1];
	end
	if (
		( UltimaMem_expected_prev[2] !== 1'bx ) && ( UltimaMem_prev[2] !== UltimaMem_expected_prev[2] )
		&& ((UltimaMem_expected_prev[2] !== last_UltimaMem_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[2] = UltimaMem_expected_prev[2];
	end
	if (
		( UltimaMem_expected_prev[3] !== 1'bx ) && ( UltimaMem_prev[3] !== UltimaMem_expected_prev[3] )
		&& ((UltimaMem_expected_prev[3] !== last_UltimaMem_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[3] = UltimaMem_expected_prev[3];
	end
	if (
		( UltimaMem_expected_prev[4] !== 1'bx ) && ( UltimaMem_prev[4] !== UltimaMem_expected_prev[4] )
		&& ((UltimaMem_expected_prev[4] !== last_UltimaMem_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[4] = UltimaMem_expected_prev[4];
	end
	if (
		( UltimaMem_expected_prev[5] !== 1'bx ) && ( UltimaMem_prev[5] !== UltimaMem_expected_prev[5] )
		&& ((UltimaMem_expected_prev[5] !== last_UltimaMem_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[5] = UltimaMem_expected_prev[5];
	end
	if (
		( UltimaMem_expected_prev[6] !== 1'bx ) && ( UltimaMem_prev[6] !== UltimaMem_expected_prev[6] )
		&& ((UltimaMem_expected_prev[6] !== last_UltimaMem_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[6] = UltimaMem_expected_prev[6];
	end
	if (
		( UltimaMem_expected_prev[7] !== 1'bx ) && ( UltimaMem_prev[7] !== UltimaMem_expected_prev[7] )
		&& ((UltimaMem_expected_prev[7] !== last_UltimaMem_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[7] = UltimaMem_expected_prev[7];
	end
	if (
		( UltimaMem_expected_prev[8] !== 1'bx ) && ( UltimaMem_prev[8] !== UltimaMem_expected_prev[8] )
		&& ((UltimaMem_expected_prev[8] !== last_UltimaMem_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[8] = UltimaMem_expected_prev[8];
	end
	if (
		( UltimaMem_expected_prev[9] !== 1'bx ) && ( UltimaMem_prev[9] !== UltimaMem_expected_prev[9] )
		&& ((UltimaMem_expected_prev[9] !== last_UltimaMem_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[9] = UltimaMem_expected_prev[9];
	end
	if (
		( UltimaMem_expected_prev[10] !== 1'bx ) && ( UltimaMem_prev[10] !== UltimaMem_expected_prev[10] )
		&& ((UltimaMem_expected_prev[10] !== last_UltimaMem_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[10] = UltimaMem_expected_prev[10];
	end
	if (
		( UltimaMem_expected_prev[11] !== 1'bx ) && ( UltimaMem_prev[11] !== UltimaMem_expected_prev[11] )
		&& ((UltimaMem_expected_prev[11] !== last_UltimaMem_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[11] = UltimaMem_expected_prev[11];
	end
	if (
		( UltimaMem_expected_prev[12] !== 1'bx ) && ( UltimaMem_prev[12] !== UltimaMem_expected_prev[12] )
		&& ((UltimaMem_expected_prev[12] !== last_UltimaMem_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[12] = UltimaMem_expected_prev[12];
	end
	if (
		( UltimaMem_expected_prev[13] !== 1'bx ) && ( UltimaMem_prev[13] !== UltimaMem_expected_prev[13] )
		&& ((UltimaMem_expected_prev[13] !== last_UltimaMem_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[13] = UltimaMem_expected_prev[13];
	end
	if (
		( UltimaMem_expected_prev[14] !== 1'bx ) && ( UltimaMem_prev[14] !== UltimaMem_expected_prev[14] )
		&& ((UltimaMem_expected_prev[14] !== last_UltimaMem_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[14] = UltimaMem_expected_prev[14];
	end
	if (
		( UltimaMem_expected_prev[15] !== 1'bx ) && ( UltimaMem_prev[15] !== UltimaMem_expected_prev[15] )
		&& ((UltimaMem_expected_prev[15] !== last_UltimaMem_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[15] = UltimaMem_expected_prev[15];
	end
	if (
		( UltimaMem_expected_prev[16] !== 1'bx ) && ( UltimaMem_prev[16] !== UltimaMem_expected_prev[16] )
		&& ((UltimaMem_expected_prev[16] !== last_UltimaMem_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[16] = UltimaMem_expected_prev[16];
	end
	if (
		( UltimaMem_expected_prev[17] !== 1'bx ) && ( UltimaMem_prev[17] !== UltimaMem_expected_prev[17] )
		&& ((UltimaMem_expected_prev[17] !== last_UltimaMem_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[17] = UltimaMem_expected_prev[17];
	end
	if (
		( UltimaMem_expected_prev[18] !== 1'bx ) && ( UltimaMem_prev[18] !== UltimaMem_expected_prev[18] )
		&& ((UltimaMem_expected_prev[18] !== last_UltimaMem_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[18] = UltimaMem_expected_prev[18];
	end
	if (
		( UltimaMem_expected_prev[19] !== 1'bx ) && ( UltimaMem_prev[19] !== UltimaMem_expected_prev[19] )
		&& ((UltimaMem_expected_prev[19] !== last_UltimaMem_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[19] = UltimaMem_expected_prev[19];
	end
	if (
		( UltimaMem_expected_prev[20] !== 1'bx ) && ( UltimaMem_prev[20] !== UltimaMem_expected_prev[20] )
		&& ((UltimaMem_expected_prev[20] !== last_UltimaMem_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[20] = UltimaMem_expected_prev[20];
	end
	if (
		( UltimaMem_expected_prev[21] !== 1'bx ) && ( UltimaMem_prev[21] !== UltimaMem_expected_prev[21] )
		&& ((UltimaMem_expected_prev[21] !== last_UltimaMem_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[21] = UltimaMem_expected_prev[21];
	end
	if (
		( UltimaMem_expected_prev[22] !== 1'bx ) && ( UltimaMem_prev[22] !== UltimaMem_expected_prev[22] )
		&& ((UltimaMem_expected_prev[22] !== last_UltimaMem_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[22] = UltimaMem_expected_prev[22];
	end
	if (
		( UltimaMem_expected_prev[23] !== 1'bx ) && ( UltimaMem_prev[23] !== UltimaMem_expected_prev[23] )
		&& ((UltimaMem_expected_prev[23] !== last_UltimaMem_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[23] = UltimaMem_expected_prev[23];
	end
	if (
		( UltimaMem_expected_prev[24] !== 1'bx ) && ( UltimaMem_prev[24] !== UltimaMem_expected_prev[24] )
		&& ((UltimaMem_expected_prev[24] !== last_UltimaMem_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[24] = UltimaMem_expected_prev[24];
	end
	if (
		( UltimaMem_expected_prev[25] !== 1'bx ) && ( UltimaMem_prev[25] !== UltimaMem_expected_prev[25] )
		&& ((UltimaMem_expected_prev[25] !== last_UltimaMem_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[25] = UltimaMem_expected_prev[25];
	end
	if (
		( UltimaMem_expected_prev[26] !== 1'bx ) && ( UltimaMem_prev[26] !== UltimaMem_expected_prev[26] )
		&& ((UltimaMem_expected_prev[26] !== last_UltimaMem_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[26] = UltimaMem_expected_prev[26];
	end
	if (
		( UltimaMem_expected_prev[27] !== 1'bx ) && ( UltimaMem_prev[27] !== UltimaMem_expected_prev[27] )
		&& ((UltimaMem_expected_prev[27] !== last_UltimaMem_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[27] = UltimaMem_expected_prev[27];
	end
	if (
		( UltimaMem_expected_prev[28] !== 1'bx ) && ( UltimaMem_prev[28] !== UltimaMem_expected_prev[28] )
		&& ((UltimaMem_expected_prev[28] !== last_UltimaMem_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[28] = UltimaMem_expected_prev[28];
	end
	if (
		( UltimaMem_expected_prev[29] !== 1'bx ) && ( UltimaMem_prev[29] !== UltimaMem_expected_prev[29] )
		&& ((UltimaMem_expected_prev[29] !== last_UltimaMem_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[29] = UltimaMem_expected_prev[29];
	end
	if (
		( UltimaMem_expected_prev[30] !== 1'bx ) && ( UltimaMem_prev[30] !== UltimaMem_expected_prev[30] )
		&& ((UltimaMem_expected_prev[30] !== last_UltimaMem_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[30] = UltimaMem_expected_prev[30];
	end
	if (
		( UltimaMem_expected_prev[31] !== 1'bx ) && ( UltimaMem_prev[31] !== UltimaMem_expected_prev[31] )
		&& ((UltimaMem_expected_prev[31] !== last_UltimaMem_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UltimaMem[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UltimaMem_expected_prev);
		$display ("     Real value = %b", UltimaMem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_UltimaMem_exp[31] = UltimaMem_expected_prev[31];
	end
	if (
		( WriteData_expected_prev[0] !== 1'bx ) && ( WriteData_prev[0] !== WriteData_expected_prev[0] )
		&& ((WriteData_expected_prev[0] !== last_WriteData_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[0] = WriteData_expected_prev[0];
	end
	if (
		( WriteData_expected_prev[1] !== 1'bx ) && ( WriteData_prev[1] !== WriteData_expected_prev[1] )
		&& ((WriteData_expected_prev[1] !== last_WriteData_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[1] = WriteData_expected_prev[1];
	end
	if (
		( WriteData_expected_prev[2] !== 1'bx ) && ( WriteData_prev[2] !== WriteData_expected_prev[2] )
		&& ((WriteData_expected_prev[2] !== last_WriteData_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[2] = WriteData_expected_prev[2];
	end
	if (
		( WriteData_expected_prev[3] !== 1'bx ) && ( WriteData_prev[3] !== WriteData_expected_prev[3] )
		&& ((WriteData_expected_prev[3] !== last_WriteData_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[3] = WriteData_expected_prev[3];
	end
	if (
		( WriteData_expected_prev[4] !== 1'bx ) && ( WriteData_prev[4] !== WriteData_expected_prev[4] )
		&& ((WriteData_expected_prev[4] !== last_WriteData_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[4] = WriteData_expected_prev[4];
	end
	if (
		( WriteData_expected_prev[5] !== 1'bx ) && ( WriteData_prev[5] !== WriteData_expected_prev[5] )
		&& ((WriteData_expected_prev[5] !== last_WriteData_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[5] = WriteData_expected_prev[5];
	end
	if (
		( WriteData_expected_prev[6] !== 1'bx ) && ( WriteData_prev[6] !== WriteData_expected_prev[6] )
		&& ((WriteData_expected_prev[6] !== last_WriteData_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[6] = WriteData_expected_prev[6];
	end
	if (
		( WriteData_expected_prev[7] !== 1'bx ) && ( WriteData_prev[7] !== WriteData_expected_prev[7] )
		&& ((WriteData_expected_prev[7] !== last_WriteData_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[7] = WriteData_expected_prev[7];
	end
	if (
		( WriteData_expected_prev[8] !== 1'bx ) && ( WriteData_prev[8] !== WriteData_expected_prev[8] )
		&& ((WriteData_expected_prev[8] !== last_WriteData_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[8] = WriteData_expected_prev[8];
	end
	if (
		( WriteData_expected_prev[9] !== 1'bx ) && ( WriteData_prev[9] !== WriteData_expected_prev[9] )
		&& ((WriteData_expected_prev[9] !== last_WriteData_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[9] = WriteData_expected_prev[9];
	end
	if (
		( WriteData_expected_prev[10] !== 1'bx ) && ( WriteData_prev[10] !== WriteData_expected_prev[10] )
		&& ((WriteData_expected_prev[10] !== last_WriteData_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[10] = WriteData_expected_prev[10];
	end
	if (
		( WriteData_expected_prev[11] !== 1'bx ) && ( WriteData_prev[11] !== WriteData_expected_prev[11] )
		&& ((WriteData_expected_prev[11] !== last_WriteData_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[11] = WriteData_expected_prev[11];
	end
	if (
		( WriteData_expected_prev[12] !== 1'bx ) && ( WriteData_prev[12] !== WriteData_expected_prev[12] )
		&& ((WriteData_expected_prev[12] !== last_WriteData_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[12] = WriteData_expected_prev[12];
	end
	if (
		( WriteData_expected_prev[13] !== 1'bx ) && ( WriteData_prev[13] !== WriteData_expected_prev[13] )
		&& ((WriteData_expected_prev[13] !== last_WriteData_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[13] = WriteData_expected_prev[13];
	end
	if (
		( WriteData_expected_prev[14] !== 1'bx ) && ( WriteData_prev[14] !== WriteData_expected_prev[14] )
		&& ((WriteData_expected_prev[14] !== last_WriteData_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[14] = WriteData_expected_prev[14];
	end
	if (
		( WriteData_expected_prev[15] !== 1'bx ) && ( WriteData_prev[15] !== WriteData_expected_prev[15] )
		&& ((WriteData_expected_prev[15] !== last_WriteData_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[15] = WriteData_expected_prev[15];
	end
	if (
		( WriteData_expected_prev[16] !== 1'bx ) && ( WriteData_prev[16] !== WriteData_expected_prev[16] )
		&& ((WriteData_expected_prev[16] !== last_WriteData_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[16] = WriteData_expected_prev[16];
	end
	if (
		( WriteData_expected_prev[17] !== 1'bx ) && ( WriteData_prev[17] !== WriteData_expected_prev[17] )
		&& ((WriteData_expected_prev[17] !== last_WriteData_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[17] = WriteData_expected_prev[17];
	end
	if (
		( WriteData_expected_prev[18] !== 1'bx ) && ( WriteData_prev[18] !== WriteData_expected_prev[18] )
		&& ((WriteData_expected_prev[18] !== last_WriteData_exp[18]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[18] = WriteData_expected_prev[18];
	end
	if (
		( WriteData_expected_prev[19] !== 1'bx ) && ( WriteData_prev[19] !== WriteData_expected_prev[19] )
		&& ((WriteData_expected_prev[19] !== last_WriteData_exp[19]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[19] = WriteData_expected_prev[19];
	end
	if (
		( WriteData_expected_prev[20] !== 1'bx ) && ( WriteData_prev[20] !== WriteData_expected_prev[20] )
		&& ((WriteData_expected_prev[20] !== last_WriteData_exp[20]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[20] = WriteData_expected_prev[20];
	end
	if (
		( WriteData_expected_prev[21] !== 1'bx ) && ( WriteData_prev[21] !== WriteData_expected_prev[21] )
		&& ((WriteData_expected_prev[21] !== last_WriteData_exp[21]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[21] = WriteData_expected_prev[21];
	end
	if (
		( WriteData_expected_prev[22] !== 1'bx ) && ( WriteData_prev[22] !== WriteData_expected_prev[22] )
		&& ((WriteData_expected_prev[22] !== last_WriteData_exp[22]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[22] = WriteData_expected_prev[22];
	end
	if (
		( WriteData_expected_prev[23] !== 1'bx ) && ( WriteData_prev[23] !== WriteData_expected_prev[23] )
		&& ((WriteData_expected_prev[23] !== last_WriteData_exp[23]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[23] = WriteData_expected_prev[23];
	end
	if (
		( WriteData_expected_prev[24] !== 1'bx ) && ( WriteData_prev[24] !== WriteData_expected_prev[24] )
		&& ((WriteData_expected_prev[24] !== last_WriteData_exp[24]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[24] = WriteData_expected_prev[24];
	end
	if (
		( WriteData_expected_prev[25] !== 1'bx ) && ( WriteData_prev[25] !== WriteData_expected_prev[25] )
		&& ((WriteData_expected_prev[25] !== last_WriteData_exp[25]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[25] = WriteData_expected_prev[25];
	end
	if (
		( WriteData_expected_prev[26] !== 1'bx ) && ( WriteData_prev[26] !== WriteData_expected_prev[26] )
		&& ((WriteData_expected_prev[26] !== last_WriteData_exp[26]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[26] = WriteData_expected_prev[26];
	end
	if (
		( WriteData_expected_prev[27] !== 1'bx ) && ( WriteData_prev[27] !== WriteData_expected_prev[27] )
		&& ((WriteData_expected_prev[27] !== last_WriteData_exp[27]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[27] = WriteData_expected_prev[27];
	end
	if (
		( WriteData_expected_prev[28] !== 1'bx ) && ( WriteData_prev[28] !== WriteData_expected_prev[28] )
		&& ((WriteData_expected_prev[28] !== last_WriteData_exp[28]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[28] = WriteData_expected_prev[28];
	end
	if (
		( WriteData_expected_prev[29] !== 1'bx ) && ( WriteData_prev[29] !== WriteData_expected_prev[29] )
		&& ((WriteData_expected_prev[29] !== last_WriteData_exp[29]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[29] = WriteData_expected_prev[29];
	end
	if (
		( WriteData_expected_prev[30] !== 1'bx ) && ( WriteData_prev[30] !== WriteData_expected_prev[30] )
		&& ((WriteData_expected_prev[30] !== last_WriteData_exp[30]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[30] = WriteData_expected_prev[30];
	end
	if (
		( WriteData_expected_prev[31] !== 1'bx ) && ( WriteData_prev[31] !== WriteData_expected_prev[31] )
		&& ((WriteData_expected_prev[31] !== last_WriteData_exp[31]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[31] = WriteData_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module DE0_NANO_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg dump;
reg reset;
// wires                                               
wire [31:0] instr;
wire [31:0] pc;
wire [31:0] ReadData;
wire [31:0] UltimaMem;
wire [31:0] WriteData;

wire sampler;                             

// assign statements (if any)                          
DE0_NANO i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.dump(dump),
	.instr(instr),
	.pc(pc),
	.ReadData(ReadData),
	.reset(reset),
	.UltimaMem(UltimaMem),
	.WriteData(WriteData)
);

// clk
always
begin
	clk = 1'b0;
	clk = #2500 1'b1;
	#2500;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #20000 1'b0;
end 

// dump
initial
begin
	dump = 1'b0;
end 

DE0_NANO_vlg_sample_tst tb_sample (
	.clk(clk),
	.dump(dump),
	.reset(reset),
	.sampler_tx(sampler)
);

DE0_NANO_vlg_check_tst tb_out(
	.instr(instr),
	.pc(pc),
	.ReadData(ReadData),
	.UltimaMem(UltimaMem),
	.WriteData(WriteData),
	.sampler_rx(sampler)
);
endmodule

